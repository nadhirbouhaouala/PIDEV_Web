<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'ivory.serializer.registry.type' shared service.

include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Registry\\TypeRegistryInterface.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Registry\\TypeRegistry.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\TypeInterface.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\ArrayType.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\BooleanType.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\ClosureType.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\DateTimeType.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\ExceptionType.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\FloatType.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer-bundle\\Type\\FormType.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\IntegerType.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\NullType.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\ResourceType.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\StdClassType.php';
include_once $this->targetDirs[3].'\\vendor\\egeloen\\serializer\\src\\Type\\StringType.php';

$this->services['ivory.serializer.registry.type'] = $instance = new \Ivory\Serializer\Registry\TypeRegistry();

$a = ${($_ = isset($this->services['ivory.serializer.type.array']) ? $this->services['ivory.serializer.type.array'] : ($this->services['ivory.serializer.type.array'] = new \Ivory\Serializer\Type\ArrayType())) && false ?: '_'};
$b = ${($_ = isset($this->services['ivory.serializer.type.boolean']) ? $this->services['ivory.serializer.type.boolean'] : ($this->services['ivory.serializer.type.boolean'] = new \Ivory\Serializer\Type\BooleanType())) && false ?: '_'};
$c = ${($_ = isset($this->services['ivory.serializer.type.closure']) ? $this->services['ivory.serializer.type.closure'] : ($this->services['ivory.serializer.type.closure'] = new \Ivory\Serializer\Type\ClosureType())) && false ?: '_'};
$d = ${($_ = isset($this->services['ivory.serializer.type.date_time']) ? $this->services['ivory.serializer.type.date_time'] : ($this->services['ivory.serializer.type.date_time'] = new \Ivory\Serializer\Type\DateTimeType('Y-m-d\\TH:i:sP', 'Europe/Berlin'))) && false ?: '_'};
$e = ${($_ = isset($this->services['ivory.serializer.type.exception']) ? $this->services['ivory.serializer.type.exception'] : ($this->services['ivory.serializer.type.exception'] = new \Ivory\Serializer\Type\ExceptionType(true))) && false ?: '_'};
$f = ${($_ = isset($this->services['ivory.serializer.type.float']) ? $this->services['ivory.serializer.type.float'] : ($this->services['ivory.serializer.type.float'] = new \Ivory\Serializer\Type\FloatType())) && false ?: '_'};
$g = ${($_ = isset($this->services['ivory.serializer.type.form']) ? $this->services['ivory.serializer.type.form'] : ($this->services['ivory.serializer.type.form'] = new \Ivory\SerializerBundle\Type\FormType())) && false ?: '_'};
$h = ${($_ = isset($this->services['ivory.serializer.type.form_error']) ? $this->services['ivory.serializer.type.form_error'] : $this->load('getIvory_Serializer_Type_FormErrorService.php')) && false ?: '_'};
$i = ${($_ = isset($this->services['ivory.serializer.type.integer']) ? $this->services['ivory.serializer.type.integer'] : ($this->services['ivory.serializer.type.integer'] = new \Ivory\Serializer\Type\IntegerType())) && false ?: '_'};
$j = ${($_ = isset($this->services['ivory.serializer.type.null']) ? $this->services['ivory.serializer.type.null'] : ($this->services['ivory.serializer.type.null'] = new \Ivory\Serializer\Type\NullType())) && false ?: '_'};
$k = ${($_ = isset($this->services['ivory.serializer.type.object']) ? $this->services['ivory.serializer.type.object'] : $this->load('getIvory_Serializer_Type_ObjectService.php')) && false ?: '_'};
$l = ${($_ = isset($this->services['ivory.serializer.type.resource']) ? $this->services['ivory.serializer.type.resource'] : ($this->services['ivory.serializer.type.resource'] = new \Ivory\Serializer\Type\ResourceType())) && false ?: '_'};
$m = ${($_ = isset($this->services['ivory.serializer.type.std_class']) ? $this->services['ivory.serializer.type.std_class'] : ($this->services['ivory.serializer.type.std_class'] = new \Ivory\Serializer\Type\StdClassType())) && false ?: '_'};
$n = ${($_ = isset($this->services['ivory.serializer.type.string']) ? $this->services['ivory.serializer.type.string'] : ($this->services['ivory.serializer.type.string'] = new \Ivory\Serializer\Type\StringType())) && false ?: '_'};

$instance->registerType('array', 1, $a);
$instance->registerType('bool', 1, $b);
$instance->registerType('boolean', 1, $b);
$instance->registerType('closure', 1, $c);
$instance->registerType('DateTimeInterface', 1, $d);
$instance->registerType('Exception', 1, $e);
$instance->registerType('double', 1, $f);
$instance->registerType('float', 1, $f);
$instance->registerType('numeric', 1, $f);
$instance->registerType('Symfony\\Component\\Form\\Form', 1, $g);
$instance->registerType('Symfony\\Component\\Form\\FormError', 1, $h);
$instance->registerType('int', 1, $i);
$instance->registerType('integer', 1, $i);
$instance->registerType('null', 1, $j);
$instance->registerType('object', 1, $k);
$instance->registerType('resource', 1, $l);
$instance->registerType('stdClass', 1, $m);
$instance->registerType('string', 1, $n);
$instance->registerType('array', 2, $a);
$instance->registerType('bool', 2, $b);
$instance->registerType('boolean', 2, $b);
$instance->registerType('closure', 2, $c);
$instance->registerType('DateTimeInterface', 2, $d);
$instance->registerType('Exception', 2, $e);
$instance->registerType('double', 2, $f);
$instance->registerType('float', 2, $f);
$instance->registerType('numeric', 2, $f);
$instance->registerType('Symfony\\Component\\Form\\Form', 2, $g);
$instance->registerType('Symfony\\Component\\Form\\FormError', 2, $h);
$instance->registerType('int', 2, $i);
$instance->registerType('integer', 2, $i);
$instance->registerType('null', 2, $j);
$instance->registerType('object', 2, $k);
$instance->registerType('resource', 2, $l);
$instance->registerType('stdClass', 2, $m);
$instance->registerType('string', 2, $n);

return $instance;
